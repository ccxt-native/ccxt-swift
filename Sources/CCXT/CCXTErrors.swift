// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

import Foundation

class BaseError: Error, CustomStringConvertible, LocalizedError {
    let message: String
    var name: String { "BaseError" }

    required init(_ message: String) {
        self.message = message
    }

    var description: String {
        return "\(name): \(message)"
    }

    public var errorDescription: String? { 
        return "\(name): \(message)"
    }
}

// ------------------------------------------------------------------------

// ########################################################################
// ########################################################################
// ########################################################################
// ########################################################################
// ########                        ########                        ########
// ########                        ########                        ########
// ########                        ########                        ########
// ########                        ########                        ########
// ########        ########################        ########################
// ########        ########################        ########################
// ########        ########################        ########################
// ########        ########################        ########################
// ########                        ########                        ########
// ########                        ########                        ########
// ########                        ########                        ########
// ########                        ########                        ########
// ########################################################################
// ########################################################################
// ########################################################################
// ########################################################################
// ########        ########        ########                        ########
// ########        ########        ########                        ########
// ########        ########        ########                        ########
// ########        ########        ########                        ########
// ################        ########################        ################
// ################        ########################        ################
// ################        ########################        ################
// ################        ########################        ################
// ########        ########        ################        ################
// ########        ########        ################        ################
// ########        ########        ################        ################
// ########        ########        ################        ################
// ########################################################################
// ########################################################################
// ########################################################################
// ########################################################################

// ------------------------------------------------------------------------
// METHODS BELOW THIS LINE ARE TRANSPILED

class ExchangeError: BaseError {
    override var name: String { "ExchangeError" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class AuthenticationError: ExchangeError {
    override var name: String { "AuthenticationError" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class PermissionDenied: AuthenticationError {
    override var name: String { "PermissionDenied" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class AccountNotEnabled: PermissionDenied {
    override var name: String { "AccountNotEnabled" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class AccountSuspended: AuthenticationError {
    override var name: String { "AccountSuspended" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class ArgumentsRequired: ExchangeError {
    override var name: String { "ArgumentsRequired" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class BadRequest: ExchangeError {
    override var name: String { "BadRequest" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class BadSymbol: BadRequest {
    override var name: String { "BadSymbol" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OperationRejected: ExchangeError {
    override var name: String { "OperationRejected" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class NoChange: OperationRejected {
    override var name: String { "NoChange" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class MarginModeAlreadySet: NoChange {
    override var name: String { "MarginModeAlreadySet" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class MarketClosed: OperationRejected {
    override var name: String { "MarketClosed" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class ManualInteractionNeeded: OperationRejected {
    override var name: String { "ManualInteractionNeeded" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class RestrictedLocation: OperationRejected {
    override var name: String { "RestrictedLocation" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class InsufficientFunds: ExchangeError {
    override var name: String { "InsufficientFunds" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class InvalidAddress: ExchangeError {
    override var name: String { "InvalidAddress" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class AddressPending: InvalidAddress {
    override var name: String { "AddressPending" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class InvalidOrder: ExchangeError {
    override var name: String { "InvalidOrder" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OrderNotFound: InvalidOrder {
    override var name: String { "OrderNotFound" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OrderNotCached: InvalidOrder {
    override var name: String { "OrderNotCached" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OrderImmediatelyFillable: InvalidOrder {
    override var name: String { "OrderImmediatelyFillable" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OrderNotFillable: InvalidOrder {
    override var name: String { "OrderNotFillable" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class DuplicateOrderId: InvalidOrder {
    override var name: String { "DuplicateOrderId" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class ContractUnavailable: InvalidOrder {
    override var name: String { "ContractUnavailable" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class NotSupported: ExchangeError {
    override var name: String { "NotSupported" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class InvalidProxySettings: ExchangeError {
    override var name: String { "InvalidProxySettings" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class ExchangeClosedByUser: ExchangeError {
    override var name: String { "ExchangeClosedByUser" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OperationFailed: BaseError {
    override var name: String { "OperationFailed" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class NetworkError: OperationFailed {
    override var name: String { "NetworkError" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class DDoSProtection: NetworkError {
    override var name: String { "DDoSProtection" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class RateLimitExceeded: NetworkError {
    override var name: String { "RateLimitExceeded" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class ExchangeNotAvailable: NetworkError {
    override var name: String { "ExchangeNotAvailable" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class OnMaintenance: ExchangeNotAvailable {
    override var name: String { "OnMaintenance" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class InvalidNonce: NetworkError {
    override var name: String { "InvalidNonce" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class ChecksumError: InvalidNonce {
    override var name: String { "ChecksumError" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class RequestTimeout: NetworkError {
    override var name: String { "RequestTimeout" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class BadResponse: OperationFailed {
    override var name: String { "BadResponse" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class NullResponse: BadResponse {
    override var name: String { "NullResponse" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class CancelPending: OperationFailed {
    override var name: String { "CancelPending" }
    override required init(_ message: String) {
        super.init(message)
    }
}
class UnsubscribeError: BaseError {
    override var name: String { "UnsubscribeError" }
    override required init(_ message: String) {
        super.init(message)
    }
}
